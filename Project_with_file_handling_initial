#include <iostream>
#include <vector>
#include <cmath>
#include <string>
#include <algorithm>
#include <fstream>

using namespace std;

struct Member {
    string name;
    double balance;
    vector<double> balance_history;

    Member(string n, double b) : name(n), balance(b) {}
};

// Function to add a new member to the group
void add_member(vector<Member>& members, string name) {
    // Create a new member and add them to the vector
    members.push_back(Member(name, 0));
}

// Function to add expenses for a member
void add_expenses(vector<Member>& members, string name, double amount) {
    // Find the member with the given name and update their balance
    for (auto& m : members) {
        if (m.name == name) {
            m.balance -= amount;
            m.balance_history.push_back(m.balance);
            break;
        }
    }
}

// Function to calculate the net balance for a member
void net_balance(vector<Member>& members, string name) {
    // Find the member with the given name and display their balance
    for (const auto& m : members) {
        if (m.name == name) {
            cout << "Net balance for " << name << ": " << m.balance << endl;
            return;
        }
    }
    cout << "Member not found." << endl;
}

// Function to display the balance history for a member
void display_balance_history(const vector<double>& history) {
    for (double b : history) {
        cout << b << " ";
    }
    cout << endl;
}

// Function to display the expense history for a member
void display_expense_history(const vector<double>& history) {
    for (double e : history) {
        cout << e << " ";
    }
    cout << endl;
}

// Function to display the expense and balance history for a member
void history(vector<Member>& members, string name) {
    // Find the member with the given name and display their history
    for (auto& m : members) {
        if (m.name == name) {
            cout << "Expense history for " << name << ": ";
            display_expense_history(m.balance_history);
            cout << "Balance history for " << name << ": ";
            display_balance_history(m.balance_history);
            return;
        }
    }
    cout << "Member not found." << endl;
}

void store_expense_history(vector<Member>& members, string filename) {
    ofstream file(filename);
    if (file.is_open()) {
        for (const auto& m : members) {
            file << m.name << "," << m.balance << "\n";
        }
        file.close();
        cout << "Expense history has been stored in " << filename << endl;
    }
    else {
        cout << "Unable to open file for storing expense history." << endl;
    }
}

void retrieve_expense_history(vector<Member>& members, string filename) {
    ifstream file(filename);
    if (file.is_open()) {
        string line;
        while (getline(file, line)) {
            size_t pos = line.find(",");
            if (pos != string::npos) {
                string name = line.substr(0, pos);
                double balance = stod(line.substr(pos + 1));
                members.push_back(Member(name, balance));
            }
        }
        file.close();
    }
    else {
        cout << "Unable to open file for retrieving expense history." << endl;
    }
}

int main() {
    vector<Member> members;

    // Get the number of members in the group from the user
    int num_members;
    cout << "How many members are in the group?" << endl;// Read in the number of members from the user
cin >> num_members;

// Get the name of each member from the user and add them to the group
for (int i = 0; i < num_members; i++) {
    string name;
    cout << "Enter the name of member " << i + 1 << ": ";
    cin >> name;
    add_member(members, name);
}

// Loop to get commands from the user
string command;
while (true) {
    // Get the next command from the user
    cout << "Enter a command (add, expense, balance, history, store, retrieve, or quit): ";
    cin >> command;

    // Process the command
    if (command == "add") {
        string name;
        cout << "Enter the name of the member to add: ";
        cin >> name;
        add_member(members, name);
    }
    else if (command == "expense") {
        string name;
        double amount;
        cout << "Enter the name of the member who paid the expense: ";
        cin >> name;
        cout << "Enter the amount of the expense: ";
        cin >> amount;
        add_expenses(members, name, amount);
    }
    else if (command == "balance") {
        string name;
        cout << "Enter the name of the member to check the balance: ";
        cin >> name;
        net_balance(members, name);
    }
    else if (command == "history") {
        string name;
        cout << "Enter the name of the member to display the history: ";
        cin >> name;
        history(members, name);
    }
    else if (command == "store") {
        string filename;
        cout << "Enter the name of the file to store the expense history: ";
        cin >> filename;
        store_expense_history(members, filename);
    }
    else if (command == "retrieve") {
        string filename;
        cout << "Enter the name of the file to retrieve the expense history: ";
        cin >> filename;
        retrieve_expense_history(members, filename);
    }
    else if (command == "quit") {
        break;
    }
    else {
        cout << "Invalid command. Please try again." << endl;
    }
}

return 0;
}
